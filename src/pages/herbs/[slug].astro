---
import type { APIContext } from "astro";
import type { Herb } from "../../types/herbs";
import db from "../../../staticql.config.ts";
import { formatDate } from "../../utils/date";
import { renderMarkdownWithCustomLayout } from "../../utils/herbs";
import ModalActivator from "../../components/ModalActivator";

export async function getStaticPaths() {
  const herbs: Herb[] = await db
    .from("herbs")
    .join("reports")
    .join("tags")
    .options({ indexMode: "only" })
    .exec();

  return await Promise.all(
    herbs.map(async (herb) => {
      herb.description = yamlContentSplitSection(herb.content);

      if (herb.reports) {
        for await (const report of herb.reports) {
          if (!report.reportGroupSlug) {
            herb.reports = [];
            continue;
          }

          const reportGroups: ReportGroup[] = await db
            .from("reportGroups")
            .where("slug", "eq", report.reportGroupSlug)
            .options({ indexMode: "only" })
            .exec();

          const processes = await db
            .from("processes")
            .where("slug", "eq", reportGroups[0].processSlug)
            .options({ indexMode: "only" })
            .exec();

          report.process = processes[0];
        }
      }

      return {
        params: { slug: herb.slug },
        props: { herb },
      };
    })
  );
}

export function GET({ props }: APIContext) {
  return new Response(JSON.stringify({ herb: props.herb }));
}

const { herb }: { herb: Herb } = Astro.props;

const relationHerbs: Herb[] = (
  await db.from("herbs").where("tagSlugs", "in", herb.tagSlugs).exec()
).filter((rh) => rh.slug !== herb.slug);

import Layout from "../../layouts/Layout.astro";
import HerbCompounds from "../../components/HerbCompounds.tsx";
import { yamlContentSplitSection } from "../../utils/herbs";
import type { ReportGroup } from "../../types/reports";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import HerbDecoration from "../../components/HerbDecoration";

const breadCrumbItems: BreadcrumbProps["items"] = [
  { label: "Home", link: "/" },
  { label: "ハーブ一覧", link: "/herbs" },
  { label: herb.nameScientific },
];
---

<style is:global>
  .footnotes {
    padding-bottom: calc(var(--spacing) * 6);
  }
  .footnotes ol {
    list-style-type: decimal;
    padding-left: 2rem;
  }
  .footnotes li {
    margin-bottom: 0.5rem;
    font-size: small;
  }
</style>

<Layout>
  <div class="flex justify-center border-b-1">
    <div class="c-content my-1 text-center border-x border-vintage-ink">
      <Breadcrumb items={breadCrumbItems} />

      <h1 class="font-bold">
        {herb.name} ({herb.nameScientific})とは
      </h1>
    </div>
  </div>
  <div class="c-content p-6 sm:p-10 my-1 space-y-5 border-x border-vintage-ink">
    <HerbDecoration herb={herb} />

    <aside class="report-links">
      {
        herb.reports &&
          herb.reports.map((report) => (
            <a
              href={`/reports/${report.reportGroupSlug}`}
              class="report-link-card"
            >
              <div>
                <div>
                  <time datetime={formatDate(report.updatedAt)}>
                    {formatDate(report.updatedAt, "Y/m/d")}
                  </time>
                  <p class="w-32 line-clamp-1">
                    ({report.ingredients?.join("・")})
                  </p>
                </div>
                <div>
                  <p>{report.process?.name}</p>
                  <p>{report.summary}</p>
                </div>
              </div>
              <img src="/ui/001.png" alt="" />
            </a>
          ))
      }
    </aside>

    <article>
      <div
        class="flex flex-col sm:flex-row justify-between border-b-2 pb-2 mt-12 mb-4"
      >
        <span
          class="mr-2 text-[2.5rem] sm:text-[3rem] leading-[3rem] font-[Stoke] font-thin"
          >About</span
        >
        <p class="line-clamp-1 self-end font-[Stoke] text-sm">
          Pub. <time datetime={formatDate(herb.createdAt)}
            >{formatDate(herb.createdAt, "Y/m/d")}</time
          >
          Upd. <time datetime={formatDate(herb.updatedAt)}
            >{formatDate(herb.updatedAt, "Y/m/d")}</time
          >
        </p>
      </div>

      <div class="min-md:columns-2 [column-gap:2rem]">
        <section>
          <!-- <ImageModal
            imageUrl="/001.png"
            altText="ランダム画像3"
            className="w-full max-h-[300px] object-cover mb-2"
          /> -->
        </section>
        <!-- <section class="clear-both">
          {
            herb.description &&
              herb.description.map((desc) => <ColumnUnit {...desc} />)
          }
        </section> -->
        <section set:html={renderMarkdownWithCustomLayout(herb.content)} />
        <!-- <HerbColumn content={herb.content} client:only /> -->

        <section class="clear-both">
          <div class="c-column-head">
            <span class="font-[Stoke]">Tags</span>
            <h3 class="text-xs italic">
              {herb.name} ({herb.nameScientific})の特徴タグ
            </h3>
          </div>
          <div class="c-column-body flex gap-3">
            {
              herb.tags &&
                herb.tags.map((tag) => (
                  <a href={`/tags/${tag.slug}`} class="c-footer-tag">
                    <span class="font-bold">{tag.name}</span>
                  </a>
                ))
            }
          </div>
        </section>

        <!-- <section>
          <h3 class="c-column-head">Images</h3>
          <div class="c-column-body">
            <HerbImages images={herb.images} />
          </div>
        </section> -->
        <!-- <section>
          <h3 class="c-column-head">Compunds</h3>
          <div class="c-column-body">
            <HerbCompounds compounds={herb.compounds} />
          </div>
        </section> -->
        <section>
          <h3 class="c-column-head">Reserches</h3>
          <p class="c-column-body">
            {
              herb.researchPapers &&
                herb.researchPapers.map((link) => (
                  <a
                    href=""
                    target="_blank"
                    rel="noopener noreferrer"
                    class="c-external-link"
                  >
                    {herb.researchPapers}
                  </a>
                ))
            }
          </p>
        </section>
      </div>
    </article>

    <section>
      <div
        class="flex flex-col sm:flex-row justify-between border-b-2 pb-2 mt-12 mb-4"
      >
        <span
          class="mr-2 text-[2.5rem] sm:text-[3rem] leading-[3rem] font-[Stoke] font-thin"
          >Other Herbs</span
        >
      </div>

      <aside class="flex flex-wrap justify-items-start gap-4 mb-12">
        {
          relationHerbs.map((rh) => (
            <a
              href={`/herbs/${rh.slug}`}
              class="herb-decoration relative flex flex-1 basis-auto sm:max-w-xs w-[200px]"
            >
              <div />
              <div class="relative max-md:flex-col">
                <div class="flex flex-col justify-center px-6">
                  <span class="text-center border-b border-dashed pb-1 font-[Stoke]">
                    {rh.nameScientific}
                  </span>
                  <p class="text-sm leading-5 py-3">{rh.overview}</p>
                </div>
                <img
                  src="/ui/001.png"
                  alt="aaa"
                  width="400"
                  height="300"
                  class="absolute inset-0 opacity-20 object-contain w-16 h-16 ml-1 rounded-e-xs"
                />
              </div>
              <div />
            </a>
          ))
        }
      </aside>
    </section>
  </div>

  <ModalActivator client:only />
</Layout>
