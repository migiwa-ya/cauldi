---
import type { APIContext } from "astro";
import db from "../../../staticql.config.ts";
import { formatDate } from "../../utils/date";
import { renderMarkdownWithCustomLayout } from "../../utils/herbs";
import ModalActivator from "../../components/ModalActivator";
import ReportLinks from "../../components/ReportLinks";
import "../../styles/herbs/show.css";
import "../../components/HerbDecoration.module.css";

export async function getStaticPaths() {
  const herbs: HerbsRecord[] = await db
    .from("herbs")
    .join("reports")
    .join("tags")
    .options({ indexMode: "only" })
    .exec();

  return await Promise.all(
    herbs.map(async (herb) => {
      const description = yamlContentSplitSection(herb.content);

      return {
        params: { slug: herb.slug },
        props: { herb, description },
      };
    })
  );
}

export function GET({ props }: APIContext) {
  return new Response(
    JSON.stringify({ herb: props.herb, description: props.description })
  );
}

const { herb }: { herb: HerbsRecord } = Astro.props;

herb.reports = herb.reports
  ? await Promise.all(
      herb.reports.map(async (r) => {
        const rg: ReportGroupsRecord[] = await db
          .from("reportGroups")
          .join("process")
          .where("slug", "eq", r.reportGroupSlug)
          .exec();

        if (rg.length > 0) {
          r.reportGroup = rg[0];
          r.process = rg[0].process;
        }

        return r;
      })
    )
  : [];

const relationHerbs: HerbsRecord[] = (
  await db.from("herbs").where("tagSlugs", "in", herb.tagSlugs).exec()
).filter((rh) => rh.slug !== herb.slug);

import Layout from "../../layouts/Layout.astro";
import { yamlContentSplitSection } from "../../utils/herbs";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import HerbDecoration from "../../components/HerbDecoration";
import HerbDecorationLink from "../../components/HerbDecorationLink";
import Seo from "../../components/Seo.astro";
import type {
  HerbsRecord,
  ProcessesRecord,
  ReportGroupsRecord,
} from "../../types/staticql-types";
import { hydrateRoot } from "react-dom/client";

const breadcrumb: BreadcrumbProps = {
  items: [
    { label: "Cauldi", link: `${Astro.site}` },
    { label: "ハーブ一覧", link: `${Astro.site}herbs` },
    {
      label: `${herb.name}（${herb.nameScientific}）`,
      link: `${Astro.site}herbs/${herb.slug}`,
    },
  ],
};
---

<Layout>
  <Seo
    slot="head"
    title=`${herb.name}（${herb.nameScientific}）の効能と使い方 | Cauldi`
    description=`${herb.name}の効能や使い方、学術的な背景をわかりやすく解説。${herb.tags?.map(t => t.name).join("・")}で注目されています。Cauldiはハーブを五感で楽しみ、学べる専門サイトです。`
    url=`${Astro.site}herbs/${herb.slug}`
    image=`${Astro.site}image/herbs/arctium-lappa.jpg`
    type="article"
    ldJson={{
      "@context": "https://schema.org",
      "@type": "Product",
      name: `${herb.name}（${herb.nameScientific}）`,
      image: `${Astro.site}image/herbs/arctium-lappa.jpg`,
      description: `${herb.name}の効能や使い方、学術的な背景をわかりやすく解説。${herb.tags?.map((t) => t.name).join("・")}で注目されています。Cauldiはハーブを五感で楽しみ、学べる専門サイトです。`,
      brand: {
        "@type": "Brand",
        name: "Cauldi",
      },
      url: `${Astro.site}herbs/${herb.slug}`,
    }}
    breadcrumb={breadcrumb}
  />

  <div class="globalHeading">
    <div class="globalHeadingBody container">
      <Breadcrumb items={breadcrumb["items"]} />

      <h1 class="bold">{herb.name} ({herb.nameScientific})とは</h1>
    </div>
  </div>

  <div class="content container">
    <HerbDecoration herb={herb} />

    {herb.reports && <ReportLinks reports={herb.reports} />}

    <article>
      <div class="headingLine">
        <strong>About</strong>
        <p class="clamp-1">
          Pub. <time datetime={formatDate(herb.createdAt)}
            >{formatDate(herb.createdAt, "Y/m/d")}</time
          >
          Upd. <time datetime={formatDate(herb.updatedAt)}
            >{formatDate(herb.updatedAt, "Y/m/d")}</time
          >
        </p>
      </div>

      <div class="columnContainer">
        <section set:html={renderMarkdownWithCustomLayout(herb.content)} />

        <section>
          <div class="columnHead">
            <strong>Tags</strong>
            <h2>{herb.name} ({herb.nameScientific})の関連タグ</h2>
          </div>
          <div class="columnBody tags">
            {
              herb.tags &&
                herb.tags.map((tag) => (
                  <a href={`/tags/${tag.slug}`} class="tag">
                    <span>{tag.slug}</span>
                    <span>{tag.name}</span>
                  </a>
                ))
            }
          </div>
        </section>
      </div>
    </article>

    <section>
      <div class="headingLine">
        <strong>Other Herbs</strong>
      </div>

      <aside class="otherHerbs">
        {
          relationHerbs
            .slice(0, 5)
            .map((herb) => <HerbDecorationLink herb={herb} />)
        }
      </aside>
    </section>
  </div>

  <ModalActivator client:only />
</Layout>
