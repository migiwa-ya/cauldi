---
import type { APIContext } from "astro";
import db from "../../../staticql.config";
import { formatDate } from "../../utils/date";
import {
  renderMarkdownWithCustomLayout,
  extractFootnoteReferencesFromMarkdown,
  isScholarlyArticleUrl,
  isTrustedWebPageUrl,
} from "../../utils/herbs";
import ModalActivator from "../../components/ModalActivator";
import ReportLinks from "../../components/ReportLinks";
import "../../styles/herbs/show.css";
import "../../components/HerbDecoration.module.css";
import Layout from "../../layouts/Layout.astro";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import HerbDecoration from "../../components/HerbDecoration";
import HerbDecorationLink from "../../components/HerbDecorationLink";
import Seo from "../../components/Seo.astro";
import type {
  HerbsRecord,
  ReportGroupsRecord,
} from "../../types/staticql-types";
import HerbCompounds from "../../components/HerbCompounds";

export async function getStaticPaths() {
  const herbs = await db
    .from<HerbsRecord>("herbs")
    .join("reports")
    .join("tags")
    .join("compounds")
    .exec();

    console.log(herbs[0].reports)

  return await Promise.all(
    herbs.map(async (herb) => {
      return {
        params: { slug: herb.slug },
        props: { herb },
      };
    })
  );
}

export function GET({ props }: APIContext) {
  return new Response(JSON.stringify({ herb: props.herb }));
}

const { herb }: { herb: HerbsRecord } = Astro.props;

herb.reports = herb.reports
  ? await Promise.all(
      herb.reports.map(async (r) => {
        const rg = await db
          .from<ReportGroupsRecord>("reportGroups")
          .join("process")
          .where("slug", "eq", r.reportGroupSlug)
          .exec();

        if (rg.length > 0) {
          r.reportGroup = rg[0];
          r.process = rg[0].process;
        }

        return r;
      })
    )
  : [];

const relationHerbs = await db
  .from<HerbsRecord>("herbs")
  .where("tagSlugs", "in", herb.tagSlugs)
  .exec();

const herbFullname = `${herb.name}（${herb.nameScientific}）`;
const title = `${herbFullname}の期待される効能と使い方 | Cauldi`;
const desc = `${herbFullname}の期待される効能や使い方、学術的な背景をわかりやすく解説。${herb.tags?.map((t) => t.name).join("・")}で注目されています。Cauldiはハーブを五感で楽しみ、学ぶための専門サイトです。`;
const h1 = `${herbFullname}の期待される効能・使い方・成分`;

const footnotes = extractFootnoteReferencesFromMarkdown(herb.content);

const citation = {
  scholarlyArticle: footnotes.filter((item) => isScholarlyArticleUrl(item.url)),
  webPage: footnotes.filter((item) => isTrustedWebPageUrl(item.url)),
};

const breadcrumb: BreadcrumbProps = {
  items: [
    { label: "Cauldi", link: `${Astro.site}` },
    { label: "ハーブ一覧", link: `${Astro.site}herbs/` },
    {
      label: h1,
      link: `${Astro.site}herbs/${herb.slug}/`,
    },
  ],
};
---

<Layout>
  <Seo
    slot="head"
    title={title}
    description={desc}
    url=`${Astro.site}herbs/${herb.slug}`
    image=`${Astro.site}image/herbs/arctium-lappa.jpg`
    type="article"
    ldJson={{
      "@context": "https://schema.org",
      "@type": "WebPage",
      url: `${Astro.site}herbs/${herb.slug}`,
      name: title,
      headline: h1,
      description: desc,
      image: `${Astro.site}image/herbs/${herb.slug}.jpg`,
      datePublished: herb.createdAt,
      dateModified: herb.updatedAt,
      author: {
        "@type": "Organization",
        name: "Cauldi 編集部",
      },
      brand: {
        "@type": "Brand",
        name: "Cauldi",
      },
      mainEntity: {
        "@type": "Thing",
        name: herbFullname,
        alternateName: herb.nameAliases,
        sameAs: [herb.wiki],
      },
      additionalProperty: [
        {
          "@type": "PropertyValue",
          name: "含有成分",
          value: herb.compounds?.map((c) => c.name).join(", "),
        },
      ],
      citation: [
        ...citation.scholarlyArticle.map((item) => ({
          "@type": "ScholarlyArticle",
          name: item.label,
          url: item.url,
        })),
        ...citation.webPage.map((item) => ({
          "@type": "WebPage",
          name: item.label,
          url: item.url,
        })),
      ],
    }}
    breadcrumb={breadcrumb}
  />

  <div class="globalHeading">
    <div class="globalHeadingBody container">
      <Breadcrumb items={breadcrumb["items"]} />

      <h1 class="bold">{h1}</h1>
    </div>
  </div>

  <div class="content container">
    <HerbDecoration herb={herb} />

    {herb.reports && <ReportLinks reports={herb.reports} />}

    <article>
      <div class="headingLine">
        <strong>About</strong>
        <p class="clamp-1">
          Pub. <time datetime={formatDate(herb.createdAt)}
            >{formatDate(herb.createdAt, "Y/m/d")}</time
          >
          Upd. <time datetime={formatDate(herb.updatedAt)}
            >{formatDate(herb.updatedAt, "Y/m/d")}</time
          >
        </p>
      </div>

      <div class="columnContainer">
        <section set:html={renderMarkdownWithCustomLayout(herb.content)} />

        <section>
          <div class="columnHead">
            <strong>Compounds</strong>
            <h2>{herb.name} ({herb.nameScientific})の主要含有成分</h2>
          </div>
          <div class="columnBody">
            {herb.compounds && <HerbCompounds compounds={herb.compounds} />}
          </div>
        </section>

        <section>
          <div class="columnHead">
            <strong>Tags</strong>
            <h2>{herb.name} ({herb.nameScientific})の関連タグ</h2>
          </div>
          <div class="columnBody tags">
            {
              herb.tags &&
                herb.tags.map((tag) => (
                  <a href={`/tags/${tag.slug}/`} class="tag">
                    <span>{tag.slug}</span>
                    <span>{tag.name}</span>
                  </a>
                ))
            }
          </div>
        </section>
      </div>
    </article>

    <section>
      <div class="headingLine">
        <strong>Other Herbs</strong>
      </div>

      <aside class="otherHerbs">
        {
          relationHerbs
            .slice(0, 5)
            .map((herb) => <HerbDecorationLink herb={herb} />)
        }
      </aside>
    </section>
  </div>

  <ModalActivator client:idle />
</Layout>
