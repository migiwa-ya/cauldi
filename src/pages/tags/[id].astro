---
export async function getStaticPaths() {
  try {
    const response = await fetch('https://your-cloudflare-worker-url/api/tags');
    const tags = await response.json();
    return tags.map((tag: { id: number }) => ({ params: { id: tag.id.toString() } }));
  } catch (error) {
    // Fallback to dummy paths for local development
    return [
      { params: { id: '1' } },
      { params: { id: '2' } },
      { params: { id: '3' } },
    ];
  }
}

import Layout from "../../layouts/Layout.astro";

const { id } = Astro.params;
type Tag = {
  id: number;
  name: string;
  type: string;
  description: string;
  herbs: { slug: string; name_jp: string }[];
};

let tag: Tag;

try {
  const response = await fetch(`https://your-cloudflare-worker-url/api/tags/${id}`);
  tag = await response.json();
  // Assuming the API returns related herbs as part of the tag data
  tag.herbs = tag.herbs || [];
} catch (error) {
  // Fallback to dummy data for local development
  tag = {
    id: parseInt(id),
    name: "タグ名",
    type: "flavor",
    description: "ここにタグの説明が入ります。",
    herbs: [
      { slug: "ScientificName1", name_jp: "ハーブ1" },
      { slug: "ScientificName2", name_jp: "ハーブ2" }
    ]
  };
}
---

<Layout>
  <header class="bg-yellow-100 p-4">
    <h1 class="text-3xl font-bold">{tag.name}</h1>
    <p class="text-base">{tag.description}</p>
  </header>
  <main class="p-4 space-y-6">
    <section>
      <h3 class="text-2xl font-semibold">関連ハーブ</h3>
      <ul>
        {tag.herbs.map((herb: { slug: string, name_jp: string }) => (
          <li>
            <a href={`/herbs/${herb.slug}`} class="text-blue-500 underline">{herb.name_jp}</a>
          </li>
        ))}
      </ul>
    </section>
  </main>
</Layout>
