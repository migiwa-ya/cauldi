---
import Layout from "../../layouts/Layout.astro";
import db from "../../../staticql.config.ts";
import type { APIContext } from "astro";
import ListHerbsByTagItem from "../../components/ListHerbsByTagItem";
import ListHerbsByTagInfinite from "../../components/ListHerbsByTagInfinite";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import "../../styles/index.css";
import type { TagsRecord } from "../../types/staticql-types";

export async function getStaticPaths() {
  const tags: TagsRecord[] = await db.from("tags").exec();

  return tags.map((tag) => {
    return {
      params: { slug: tag.slug },
      props: { tag },
    };
  });
}

export function GET({ props }: APIContext) {
  return new Response(JSON.stringify({ tag: props.tag }));
}

const { tag }: { tag: TagsRecord } = Astro.props;

const initialHerbs = (
  await db.from("herbs").where("tagSlugs", "contains", tag.slug).exec()
).map((herb) => ({
  key: herb.slug,
  displayName: herb.name,
  link: `/herbs/${herb.slug}`,
  content: herb.overview,
  updatedAt: herb.updatedAt,
}));

const offset = 6;

const newsItems = initialHerbs
  .sort(
    (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
  )
  .splice(0, offset);

const breadCrumbItems: BreadcrumbProps["items"] = [
  { label: "Home", link: "/" },
  { label: `${tag.name}におすすめのハーブ一覧` },
];
---

<Layout>
  <div class="globalHeading">
    <div class="globalHeadingBody container">
      <Breadcrumb items={breadCrumbItems} />

      <h1 class="bold">{tag.name}におすすめのハーブ一覧</h1>
    </div>
  </div>

  <div class="index content container">
    {newsItems.map((item) => <ListHerbsByTagItem item={item} />)}

    <ListHerbsByTagInfinite offset={offset} slug={tag.slug} client:only />
  </div>
</Layout>
