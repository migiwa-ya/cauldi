---
import Layout from "../../layouts/Layout.astro";
import type { APIContext } from "astro";
import ListHerbsByTagInfinite from "../../components/ListHerbsByTagInfinite";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import "../../styles/index.css";
import type { HerbsRecord, TagsRecord } from "../../types/staticql-types";
import ListItem from "../../components/ListItem";
import config from "../../../public/staticql.config.json";
import { defineStaticQL, type StaticQLConfig } from "staticql";
import { FsRepository } from "staticql/repo/fs";

export async function getStaticPaths() {
  const staticql = defineStaticQL(config as StaticQLConfig)({
    repository: new FsRepository("public"),
  });

  const tags = await staticql.from<TagsRecord>("tags").exec();

  return tags.data.map((tag) => {
    return {
      params: { slug: tag.slug },
      props: { tag },
    };
  });
}

export function GET({ props }: APIContext) {
  return new Response(JSON.stringify({ tag: props.tag }));
}

const { tag }: { tag: TagsRecord } = Astro.props;

const staticql = defineStaticQL(config as StaticQLConfig)({
  repository: new FsRepository("public"),
});

const herbs = await staticql
  .from<HerbsRecord>("herbs")
  .where("tagSlugs", "eq", tag.slug)
  .pageSize(6)
  .orderBy("updatedAt", "desc")
  .exec();

const initialHerbs = herbs.data.map((herb) => ({
  key: herb.slug,
  displayName: herb.name,
  images: [
    {
      path: `/images/herbs/${herb.slug}/thumbnail.webp`,
      label: herb.name,
    },
  ],
  link: `/herbs/${herb.slug}/`,
  content: herb.overview,
  updatedAt: herb.updatedAt,
}));

const breadCrumbItems: BreadcrumbProps["items"] = [
  { label: "Home", link: "/" },
  { label: `${tag.name}におすすめのハーブ一覧` },
];
---

<Layout>
  <div class="globalHeading">
    <div class="globalHeadingBody container">
      <Breadcrumb items={breadCrumbItems} />

      <h1 class="bold">{tag.name}におすすめのハーブ一覧</h1>
    </div>
  </div>

  <div class="index content container">
    {initialHerbs.map((item) => <ListItem item={item} />)}

    {
      herbs.pageInfo.hasNextPage && (
        <ListHerbsByTagInfinite
          pageInfo={herbs.pageInfo}
          tagSlug={tag.slug}
          client:visible
        />
      )
    }
  </div>
</Layout>
