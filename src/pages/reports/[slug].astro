---
import type { APIContext } from "astro";
import db from "../../../staticql.config.ts";
import Layout from "../../layouts/Layout.astro";
import Promotion from "../../components/Promotion";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import { groupBy } from "../../utils/array";
import ReportDetail from "../../components/ReportDetail";
import Seo from "../../components/Seo.astro";
import { formatDate } from "../../utils/date";
import "../../styles/reports/show.css";
import type { ReportsRecord } from "../../types/staticql-types";
import ModalActivator from "../../components/ModalActivator";

export async function getStaticPaths() {
  const reports: ReportsRecord[] = await db
    .from("reports")
    .join("herbs")
    .join("reportGroup")
    .join("process")
    .join("usageMethod")
    .options({ indexMode: "only", indexDir: "public/data" })
    .exec();

  const groupedReports = groupBy(reports, "reportGroupSlug");

  return Object.entries(groupedReports).map(([reportGroupId, reports]) => ({
    params: { slug: reportGroupId },
    props: { reports },
  }));
}

export function GET({ props }: APIContext) {
  return new Response(JSON.stringify({ reports: props.reports }));
}

const { reports }: { reports: ReportsRecord[] } = Astro.props;
const { slug }: { slug: string } = Astro.params;

const herbsString = reports[0].herbs?.map((herb) => herb.name).join("・");
const title = `${herbsString}の${reports[0].process?.name}のレポート`;

const desc = reports[0].reportGroup?.description.replace(
  "%herbs%",
  herbsString!
);

const tags = [
  ...new Set(
    reports
      .map((r) => r.herbs?.map((h) => h?.tags?.map((t) => t)))
      .flat()
      .flat()
  ),
];

const description = `${tags
  .slice(0, 10)
  .map((t) => t?.name)
  .join("・")}で知られる${title}の体験レポート。`;

const breadcrumb: BreadcrumbProps = {
  items: [
    { label: "Cauldi", link: `${Astro.site}` },
    { label: "ハーブ利用レポート", link: `${Astro.site}reports/` },
    { label: title, link: `${Astro.site}reports/${slug}/` },
  ],
};
---

<Layout>
  <Seo
    slot="head"
    title=`${title} | Cauldi`
    description={description}
    url=`${Astro.site}reports/${slug}`
    image=`${Astro.site}/ogp/reports/abc123.jpg`
    type="article"
    ldJson={[
      {
        "@context": "https://schema.org",
        "@type": "Article",
        headline: `${title} | Cauldi`,
        description: description,
        author: { "@type": "Organization", name: "Cauldi" },
        datePublished: formatDate(reports[0].createdAt),
        dateModified: formatDate(reports[0].updatedAt),
        image: `${Astro.site}ogp/reports/abc123.jpg`,
        mainEntityOfPage: {
          "@type": "WebPage",
          "@id": `${Astro.site}reports/${slug}`,
        },
        publisher: {
          "@type": "Organization",
          name: "Cauldi",
          logo: {
            "@type": "ImageObject",
            url: `${Astro.site}logo.png`,
          },
        },
      },
    ]}
    ,
    breadcrumb={breadcrumb}
  />

  <div class="globalHeading">
    <div class="globalHeadingBody container">
      <Breadcrumb items={breadcrumb["items"]} />

      <h1 class="bold">{title}</h1>
    </div>
  </div>

  <div class="content container">
    <div class="intro">
      <p>{desc}</p>
    </div>

    {reports.map((report) => <ReportDetail report={report} />)}
  </div>

  <ModalActivator client:idle />
</Layout>
