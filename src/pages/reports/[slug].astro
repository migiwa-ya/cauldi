---
import type { APIContext } from "astro";
import Layout from "../../layouts/Layout.astro";
import Promotion from "../../components/Promotion";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import { groupBy } from "../../utils/array";
import ReportDetail from "../../components/ReportDetail";
import Seo from "../../components/Seo.astro";
import { formatDate } from "../../utils/date";
import "../../styles/reports/show.css";
import type {
  ReportsRecord,
  HerbsRecord,
  HerbStatesRecord,
  HerbPartsRecord,
} from "../../types/staticql-types";
import ModalActivator from "../../components/ModalActivator";

import config from "../../../public/staticql.config.json";
import { defineStaticQL, type StaticQLConfig } from "staticql";
import { FsRepository } from "staticql/repo/fs";

export async function getStaticPaths() {
  const staticql = defineStaticQL(config as StaticQLConfig)({
    repository: new FsRepository("public"),
  });

  const reports = await staticql
    .from<ReportsRecord>("reports")
    .join("herbs")
    .join("reportGroup")
    .join("process")
    .join("usageMethod")
    .exec();

  const groupedReports = groupBy(reports.data, "reportGroupSlug");

  return Object.entries(groupedReports).map(([reportGroupId, reports]) => ({
    params: { slug: reportGroupId },
    props: { reports },
  }));
}

export function GET({ props }: APIContext) {
  return new Response(JSON.stringify({ reports: props.reports }));
}

const staticql = defineStaticQL(config as StaticQLConfig)({
  repository: new FsRepository("public"),
});

const { reports }: { reports: ReportsRecord[] } = Astro.props;
const { slug }: { slug: string } = Astro.params;

const herbs = await Promise.all(
  (reports[0].reportGroup?.combinedHerbs ?? []).map(async (combinedHerb) => {
    const herb = await staticql
      .from<HerbsRecord>("herbs")
      .where("slug", "eq", combinedHerb.slug)
      .exec();

    const herbState = await staticql
      .from<HerbStatesRecord>("herbStates")
      .where("slug", "eq", combinedHerb.herbStateSlug)
      .exec();

    const herbPart = await staticql
      .from<HerbPartsRecord>("herbParts")
      .where("slug", "eq", combinedHerb.herbPartSlug)
      .exec();

    return {
      slug: herb.data[0].slug,
      name: herb.data[0].name,
      herbState: herbState.data[0],
      herbPart: herbPart.data[0],
    };
  })
);

const herbsString = herbs
  ?.map(
    (herb) => `${herb.name}（${herb.herbPart.name}・${herb.herbState.name}）`
  )
  .join("、");
const title = `${herbsString}の${reports[0].process?.name}のレポート`;
const desc = reports[0].reportGroup?.description.replace(
  "%herbs%",
  herbsString!
);

const tags = [
  ...new Set(
    reports
      .map((r) => r.herbs?.map((h) => h?.tags?.map((t) => t)))
      .flat()
      .flat()
  ),
];

const description = `${tags
  .slice(0, 10)
  .map((t) => t?.name)
  .join("・")}で知られる${title}の体験レポート。`;

const breadcrumb: BreadcrumbProps = {
  items: [
    { label: "Cauldi", link: `${Astro.site}` },
    { label: "ハーブ利用レポート", link: `${Astro.site}reports/` },
    { label: title, link: `${Astro.site}reports/${slug}/` },
  ],
};
---

<Layout>
  <Seo
    slot="head"
    title=`${title} | Cauldi`
    description={description}
    url=`${Astro.site}reports/${slug}/`
    image=`${Astro.site}/ogp/reports/abc123.jpg`
    type="article"
    ldJson={[
      {
        "@context": "https://schema.org",
        "@type": "Article",
        headline: `${title} | Cauldi`,
        description: description,
        author: { "@type": "Organization", name: "Cauldi" },
        datePublished: formatDate(reports[0].createdAt),
        dateModified: formatDate(reports[0].updatedAt),
        image: `${Astro.site}ogp/reports/abc123.jpg`,
        mainEntityOfPage: {
          "@type": "WebPage",
          "@id": `${Astro.site}reports/${slug}/`,
        },
        publisher: {
          "@type": "Organization",
          name: "Cauldi",
          logo: {
            "@type": "ImageObject",
            url: `${Astro.site}logo.png`,
          },
        },
      },
    ]}
    ,
    breadcrumb={breadcrumb}
  />

  <div class="globalHeading">
    <div class="globalHeadingBody container">
      <Breadcrumb items={breadcrumb["items"]} />

      <h1 class="bold">{title}</h1>
    </div>
  </div>

  <div class="content container">
    <div class="intro">
      <p>{desc}</p>
    </div>

    {reports.map((report) => <ReportDetail report={report} />)}
  </div>

  <ModalActivator client:idle />
</Layout>
