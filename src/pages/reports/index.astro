---
import Layout from "../../layouts/Layout.astro";
import db from "../../../staticql.config.ts";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import ListReportsInfinite from "../../components/ListReportsInfinite";
import "../../styles/index.css";
import type { ReportsRecord } from "../../types/staticql-types";
import ListItem from "../../components/ListItem";

const reprots: ReportsRecord[] = await db
  .from("reports")
  .join("herbs")
  .join("process")
  .exec();

const initialReports = reprots.map((report) => {
  return {
    key: report.reportGroupSlug + report.slug,
    displayName: `${(report.herbs ?? []).map((herb) => herb.name).join("・")}の${report?.process?.name}の作り方`,
    images: report.herbs!.map((herb) => ({
      path: `/images/herbs/${herb.slug}/thumbnail.webp`,
      label: herb.slug,
    })),
    link: `/reports/${report.reportGroupSlug}/`,
    content: report.summary || "No content available",
    updatedAt: report.updatedAt,
  };
});

const offset = 6;

const newsItems = initialReports
  .sort(
    (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
  )
  .splice(0, offset);

const breadCrumbItems: BreadcrumbProps["items"] = [
  { label: "Home", link: "/" },
  { label: "ハーブの使い方・レポート一覧" },
];
---

<Layout>
  <div class="globalHeading">
    <div class="globalHeadingBody container">
      <Breadcrumb items={breadCrumbItems} />

      <h1 class="bold">ハーブの使い方・レポート一覧</h1>
    </div>
  </div>

  <div class="index content container">
    {newsItems.map((item) => <ListItem item={item} />)}

    <ListReportsInfinite offset={offset} client:only />
  </div>
</Layout>
