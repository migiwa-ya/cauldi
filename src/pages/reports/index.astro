---
import Layout from "../../layouts/Layout.astro";
import Promotion from "../../components/Promotion";
import db from "../../../staticql.config.ts";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import ListReportsItem from "../../components/ListReportsItem";
import ListReportsInfinite from "../../components/ListReportsInfinite";
import type { Report, ReportGroup } from "../../types/reports";

const initialReports = await Promise.all(
  (await db.from("reports").join("herbs").exec()).map(
    async (report: Report) => {
      const reportGroup: ReportGroup = (
        await db.from("reportGroups").join("processes").exec()
      )[0];

      return {
        key: report.reportGroupSlug + report.slug,
        displayName: `${report.herbs.map((herb) => herb.name).join("・")}の${reportGroup.processes[0].name}の作り方`,
        link: `/reports/${report.reportGroupSlug}`,
        content: report.summary || "No content available",
        updatedAt: report.updatedAt,
      };
    }
  )
);

const offset = 1;

const newsItems = initialReports
  .sort(
    (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
  )
  .splice(0, offset);

const breadCrumbItems: BreadcrumbProps["items"] = [
  { label: "Home", link: "/" },
  { label: "ハーブの使い方・レポート一覧" },
];
---

<Layout>
  <div class="flex justify-center border-b-1">
    <div class="c-content my-1 text-center border-x border-vintage-ink">
      <Breadcrumb items={breadCrumbItems} />

      <h1 class="font-bold">ハーブの使い方・レポート一覧</h1>
    </div>
  </div>
  <section
    class="c-content grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8 sm:gap-10 p-6 sm:p-10 my-1 border-x border-vintage-in"
  >
    {newsItems.map((item) => <ListReportsItem item={item} />)}

    <ListReportsInfinite offset={offset} client:only />

    <Promotion />
  </section>
</Layout>
