---
import Layout from "../../layouts/Layout.astro";
import Breadcrumb, { type BreadcrumbProps } from "../../components/Breadcrumb";
import ListReportsInfinite from "../../components/ListReportsInfinite";
import "../../styles/index.css";
import type { ReportsRecord } from "../../types/staticql-types";
import ListItem from "../../components/ListItem";
import config from "../../../public/staticql.config.json";
import { defineStaticQL, type StaticQLConfig } from "staticql";
import { FsRepository } from "staticql/repo/fs";

const staticql = defineStaticQL(config as StaticQLConfig)({
  repository: new FsRepository("public"),
});

const reprots = await staticql
  .from<ReportsRecord>("reports")
  .join("herbs")
  .join("process")
  .pageSize(6)
  .orderBy("updatedAt", "desc")
  .exec();

const initialReports = reprots.data.map((report) => {
  return {
    key: report.reportGroupSlug + report.slug,
    displayName: `${(report.herbs ?? []).map((herb) => herb.name).join("・")}の${report?.process?.name}の作り方`,
    images: report.herbs!.map((herb) => ({
      path: `/images/herbs/${herb.slug}/thumbnail.webp`,
      label: herb.slug,
    })),
    link: `/reports/${report.reportGroupSlug}/`,
    content: report.summary || "No content available",
    updatedAt: report.updatedAt,
  };
});

const breadCrumbItems: BreadcrumbProps["items"] = [
  { label: "Home", link: "/" },
  { label: "ハーブの使い方・レポート一覧" },
];
---

<Layout>
  <div class="globalHeading">
    <div class="globalHeadingBody container">
      <Breadcrumb items={breadCrumbItems} />

      <h1 class="bold">ハーブの使い方・レポート一覧</h1>
    </div>
  </div>

  <div class="index content container">
    {initialReports.map((item) => <ListItem item={item} />)}

    <ListReportsInfinite pageInfo={reprots.pageInfo} client:visible />
  </div>
</Layout>
