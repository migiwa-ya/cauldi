import{j as I}from"./jsx-runtime.D_zvdyIk.js";import{r as U}from"./index.Dy6lLLXr.js";import{s as T,a as J}from"./_slug_.1673099a.rcQGyw0O.js";function E(l,e="Y-m-d H:i:s"){const t=l instanceof Date?l:new Date(l),r=s=>String(s).padStart(2,"0"),n={Y:t.getFullYear(),m:r(t.getMonth()+1),d:r(t.getDate()),H:r(t.getHours()),i:r(t.getMinutes()),s:r(t.getSeconds())};return e.replace(/[YmdHis]/g,s=>n[s]??s)}const ge=({item:l})=>{const e=l.link;return I.jsxs("a",{href:e,className:T.card,children:[I.jsx("div",{className:T.date,children:I.jsxs("time",{dateTime:E(l.updatedAt),children:[I.jsx("span",{children:E(l.updatedAt,"m")}),I.jsx("span",{children:E(l.updatedAt,"d")})]})}),I.jsx("h2",{children:l.displayName}),I.jsx("div",{className:T.content,children:l.images.map(({path:t,label:r})=>I.jsxs("figure",{children:[I.jsx("img",{src:t,alt:r,width:"350",height:"525",loading:"lazy"}),I.jsx("figcaption",{children:r})]},t))}),I.jsx("strong",{children:"基本情報"}),I.jsx("p",{className:"clamp-3",children:l.content})]})};function ye({items:l,loadMore:e,hasMore:t,ItemComponent:r}){const n=U.useRef(null),s=U.useCallback(o=>{n.current&&n.current.disconnect(),n.current=new IntersectionObserver(i=>{i[0].isIntersecting&&t&&e()}),o&&n.current.observe(o)},[e,t]);return I.jsxs(I.Fragment,{children:[l.map((o,i)=>I.jsx(r,{item:o},o.key)),I.jsx("div",{ref:s})]})}const xe=({loading:l=!1})=>l?I.jsx("div",{className:J.loadingFooter,children:I.jsx("div",{className:J.spinner})}):null;function F(l,e){const t=e.split(".");let r=[l];for(const n of t)r=r.map(s=>Array.isArray(s)?s.map(o=>o?.[n]):s?.[n]).flat().filter(s=>s!=null);return r.flat(1/0).filter(n=>n!=null).map(n=>String(n))}function A(l,e){const t=new Map;for(const r of l){const n=F(r,e);for(const s of n)t.has(s)||t.set(s,[]),t.get(s).push(r)}return t}function X(l,e,t){const r=n=>n.includes(e);return Array.from(l.entries()).filter(([n])=>n&&r(n)).map(([,n])=>n)}function _(l,e,t,r){const n=r??A(t,e.foreignKey),s=e.type,o=F(l,e.localKey).flat();let i=[];if(o.length===1)for(const a of o){const c=n.get(a);c&&i.push(...c)}else i=o.map(a=>X(n,a)).flat().flat();return s==="hasOne"?i.length>0?i[0]:null:i}function V(l,e,t,r,n,s){const o=F(l,e.sourceLocalKey).flat(),i=s??A(t,e.throughForeignKey),a=n??A(r,e.targetForeignKey),f=o.map(h=>i.get(h)).filter(h=>!!h).filter(Boolean).flat().map(h=>F(h,e.throughLocalKey).filter(u=>!!u).flat().map(u=>a.get(u)).filter(u=>!!u).flat()).flat();return e.type==="hasOneThrough"?f.length>0?f[0]:null:f}function K(l){const e=Z(l);return e.substring(0,e.lastIndexOf("/"))}function Z(l){for(;l.endsWith("/");)l=l.slice(0,-1);return l}function j(...l){return l.join("/").replace(/\/+/g,"/")}function R(...l){return j(...l,"_index.jsonl")}function M(...l){return j(...l,"_prefixes.jsonl")}function k(l){const e=l.split("/"),t=e.length;return{base:j(...e.slice(0,t-1)),tail:e[t-1]}}async function*B(l,e){let t="";for(;;){const{done:r,value:n}=await l.read();if(r)break;t+=e.decode(n,{stream:!0});let s=t.split(`
`);t=s.pop()??"";for(const o of s)o.trim()&&(yield JSON.parse(o))}t.trim()&&(yield JSON.parse(t))}async function*D(l,e){let t="";for(;;){const{done:r,value:n}=await l.read();if(r)break;t+=e.decode(n,{stream:!0});let s=t.split(`
`);t=s.pop()??"";for(const o of s)o.trim()&&(yield o)}t.trim()&&(yield t)}function q(l){return Array.isArray(l)?l:[l]}function $(l){if(l instanceof Map){const e={};for(const[t,r]of l.entries())e[t]=$(r);return e}else{if(l instanceof Set)return Array.from(l).map($);if(Array.isArray(l))return l.map($);if(typeof l=="object"&&l!==null){const e={};for(const t of Object.keys(l))e[t]=$(l[t]);return e}else return l}}function ee(l){return l.split(`
`).map(e=>e.trim()).filter(Boolean)}function te(l,e,t,r,n,s){let o=!1,i=!1;if(n==="after")o=t+(t>0?1:0)+e<r,i=t+(t>0?1:0)>0;else{const a=t,c=Math.max(0,a-e);o=a<r,i=c>0}return{hasNextPage:o,hasPreviousPage:i,startCursor:l.length>0?s(l[0]):void 0,endCursor:l.length>0?s(l[l.length-1]):void 0}}function se(l,e,t,r){if(r==="after")return l.slice(e+(e>0?1:0),e+(e>0?1:0)+t);{const n=e,s=Math.max(0,n-t);return l.slice(s,n)}}function re(l){const e=JSON.stringify(l),t=new TextEncoder().encode(e);let r="";for(let n of t)r+=String.fromCharCode(n);return btoa(r)}function W(l){try{const e=atob(l),t=Uint8Array.from(e,n=>n.charCodeAt(0));return JSON.parse(new TextDecoder().decode(t))}catch{throw new Error("Invalid cursor")}}function C(l,e,t){return async function*(...r){const n=e(...r);if(await t.has(n))for(const s of await t.get(n))yield s;else{const s=[];for await(const o of l(...r))s.push(o),yield o;t.set(n,s)}}}class Y{constructor(){this.cache=new Map}async get(e){return this.cache.get(e)}async set(e,t){this.cache.set(e,t)}async has(e){return this.cache.has(e)}async delete(e){this.cache.delete(e)}async clear(){this.cache.clear()}}class O{constructor(e,t,r,n,s){this.sourceLoader=e,this.repository=t,this.resolver=r,this.logger=n,this.customIndexers={},this.cache=new Y,s&&(this.customIndexers=s)}async save(){for(const e of this.resolver.resolveAll()){if(!e.indexes)continue;const t=await this.buildRecords(e),r=this.getPrefixIndexPathByResolvedRecords(t,e.indexes),n=this.createIndexLines(t,r,e);for await(const[s,o]of Array.from(n))for(const[i,a]of o){const c=a.sort(this.indexSort()).map(f=>JSON.stringify(f)).join(`
`);this.repository.writeFile(s,c)}for await(const[s,o]of this.collectPrefixDirs(r,e).entries())for(const[i,a]of o){const c=[...a].join(`
`);this.repository.writeFile(i,c)}}}async updateIndexesForFiles(e){const t=new Map,r=[];for(const a of e)if(a.status==="A"||a.status==="D"){t.has(a.source)||t.set(a.source,new Map);const c=t.get(a.source);c?.has(a.status)||c?.set(a.status,new Set),c?.get(a.status)?.add({slug:a.slug})}const n=new Map;for(const a of e)n.has(a.source)||n.set(a.source,new Map),n.get(a.source).set(a.slug,a);const s=new Map;for(const[a,c]of t.entries()){const f=this.resolver.resolveOne(a);if(!f.indexes)continue;const h=c.get("A")??new Set;(c.get("M")??new Set).forEach(x=>h.add(x));const g=c.get("D")??new Set,u=[...h].map(x=>x.slug),d=await this.sourceLoader.loadBySlugs(a,u);s.has(f.name)||s.set(f.name,new Set),d.forEach(x=>s.get(f.name).add(x));const y=new Set(d.map(x=>x.slug));for(const x of u){if(y.has(x))continue;const p=n.get(a).get(x);p&&s.get(f.name).add(o(p))}for(const{slug:x}of g){const p=n.get(a).get(x);p&&s.get(f.name).add(o(p))}}function o(a){return{slug:a.slug,...a.fields}}const i={};for(const[a,c]of s){const f=this.resolver.resolveOne(a),h=f.relations??[];for(const[g,u]of Object.entries(h))if(this.isThroughRelation(u)){if(!s.get(u.to)){let d=s.get(u.through);if(!d){const x=(await Promise.all([...c].map(w=>this.findIndexLines(u.through,u.throughForeignKey,w[u.sourceLocalKey])))).flat().filter(w=>!!w);if(!x||!x.length)throw new Error;const p=x.map(w=>Object.keys(w?.ref)).flat();if(d=new Set(await this.sourceLoader.loadBySlugs(u.through,p)),!d.size)throw new Error(`[${f.name}] is trying to relate to a non-existent [${u.to}] source, or there is an inconsistency in the index. Please check and correct the existence of the difference file and source file, or rebuild the index.`);s.set(u.through,d)}let y=s.get(u.to);if(!y){const p=(await Promise.all([...d].map(w=>this.findIndexLines(u.to,u.targetForeignKey,w[u.throughLocalKey])))).flat().filter(w=>!!w).map(w=>Object.keys(w?.ref)).flat();if(y=new Set(await this.sourceLoader.loadBySlugs(u.to,p)),!y.size)throw new Error(`[${f.name}] is trying to relate to a non-existent [${u.to}] source, or there is an inconsistency in the index. Please check and correct the existence of the difference file and source file, or rebuild the index.`);s.set(u.to,y)}}i[g]={targetMap:A([...s.get(u.to)],u.targetForeignKey),throughMap:A([...s.get(u.through)],u.throughForeignKey)}}else{if(!s.get(u.to)){const d=[...c].map(w=>F(w,u.localKey)).flat(),x=(await Promise.all(d.map(w=>this.findIndexLines(u.to,u.foreignKey,w)))).flat().filter(w=>!!w).map(w=>Object.keys(w?.ref)).flat(),p=new Set(await this.sourceLoader.loadBySlugs(u.to,x));if(!p.size)throw new Error(`[${f.name}] is trying to relate to a non-existent [${u.to}] source, or there is an inconsistency in the index. Please check and correct the existence of the difference file and source file, or rebuild the index.`);s.set(u.to,p)}i[g]={foreignMap:A([...s.get(u.to)],u.foreignKey)}}}for(const[a,c]of t.entries()){const f=this.resolver.resolveOne(a),h=f.relations??[];if(!f.indexes||!h)continue;const g=[...s.get(f.name)].map(y=>{const x={...y};for(const[p,w]of Object.entries(h))this.isThroughRelation(w)?x[p]=V(y,w,[...s.get(w.through)],[...s.get(w.to)],i[p].targetMap,i[p].throughMap):x[p]=_(y,w,[...s.get(w.to)],i[p].foreignMap);return x}),u=this.getPrefixIndexPathByResolvedRecords(g,f.indexes),d=this.createIndexLines(g,u,f,t);for await(const[y,x]of Array.from(d)){let p=new Set;if(await this.repository.exists(y)){const w=await this.repository.readFile(y);p=new Set(w.split(`
`).map(v=>JSON.parse(v)))}for(const[w,v]of x)for(const m of v){if(w==="A"){const b=[...p].find(P=>P.v===m.v&&P.vs===m.vs);b?b.ref={...b.ref,...m.ref}:p.add(m)}else if(w==="D"){const b=[...p].find(P=>P.v===m.v&&P.vs===m.vs);b&&p.delete(b)}const S=[...p].sort(this.indexSort()).map(b=>JSON.stringify(b)).join(`
`);S.length?(this.repository.writeFile(y,S),r.push(y)):(this.repository.removeDir(K(y)),r.push(y))}}for await(const[y,x]of this.collectPrefixDirs(u,f,t).entries())for(const[p,w]of x)if(await this.repository.exists(p)){if(y==="A")if(await this.repository.exists(p)){const v=await this.repository.readFile(p),m=new Set(v.split(`
`).map(b=>b));for(const b of w)m.add(b);const S=[...m].sort((b,P)=>b.localeCompare(P)).map(b=>b).join(`
`);this.repository.writeFile(p,S),r.push(p)}else{const v=[...w].sort((m,S)=>m.localeCompare(S)).map(m=>m).join(`
`);this.repository.writeFile(p,v),r.push(p)}else if(y==="D"){const v=await this.repository.readFile(p),m=new Set(v.split(`
`).map(S=>S));for(const S of[...w]){const b=j(K(p),S);await this.repository.exists(b)||m.has(S)&&m.delete(S)}if(m.size===0)await this.repository.removeDir(K(p)),r.push(p);else{const S=[...m].join(`
`);await this.repository.writeFile(p,S),r.push(p)}}}}return r}async*readForwardPrefixIndexLines(e,t=20,r,n="slug",s=!1){const o=r?W(r):void 0,i=o?j(e,o.order[n]):s?k(await this.findLastIndexPath(e)).base:k(await this.findFirstIndexPath(e)).base,a=o?.slug;let c=0,f=!a;const h=s?this.walkPrefixIndexesUpword:this.walkPrefixIndexesDownword,g=C(d=>h.bind(this)(d),d=>d,this.cache),u=s;for await(const d of g(i))for await(const y of this.readIndexFileLines(d,u)){if(!f&&a&&Object.prototype.hasOwnProperty.call(y.ref,a)){f=!0;continue}if(f&&(yield y,++c>=t))return}}async*readBackwardPrefixIndexLines(e,t=20,r,n="slug",s=!1){const o=r?W(r):void 0,i=o?j(e,o.order[n]):s?k(await this.findFirstIndexPath(e)).base:k(await this.findLastIndexPath(e)).base,a=o?.slug;let c=0,f=!a;const h=s?this.walkPrefixIndexesDownword:this.walkPrefixIndexesUpword,g=C(d=>h.bind(this)(d),d=>d,this.cache),u=!s;for await(const d of g(i))for await(const y of this.readIndexFileLines(d,u)){if(!f&&a&&Object.prototype.hasOwnProperty.call(y.ref,a)){f=!0;continue}if(f&&(yield y,++c>=t))return}}async*readIndexFileLines(e,t){const n=(await this.repository.openFileStream(e)).getReader(),s=new TextDecoder;if(t){const o=[];for await(const i of B(n,s))o.push(i);yield*o.reverse()}else yield*B(n,s)}async findFirstIndexPath(e){const t=M(e);let r,n;try{n=await this.repository.openFileStream(t);const s=n.getReader(),o=new TextDecoder,{value:i}=await D(s,o).next();r=i}catch{return R(e)}return this.findFirstIndexPath(j(e,r))}async findLastIndexPath(e){const t=M(e);let r="",n;try{n=await this.repository.openFileStream(t);const s=n.getReader(),o=new TextDecoder;for await(r of D(s,o));}catch{return R(e)}return this.findLastIndexPath(j(e,r))}async*walkPrefixIndexesDownword(e){const t=this.repository;let r=!1;const n=async function*(s,o=new Set){if(!o.has(M(s)))try{const a=(await t.openFileStream(M(s))).getReader(),c=new TextDecoder;o.add(M(s)),o.add(s);for await(let f of D(a,c))!r&&o.has(j(s,f))&&(r=!0),r&&(yield*n(j(s,f),o))}catch{o.add(s)}if(!o.has(R(s)))try{await t.readFile(R(s)),yield R(s),o.add(R(s)),o.add(s)}catch{o.add(s)}o.has(k(s).base)||(r=!1,yield*n(k(s).base,o))};yield*n(e,new Set)}async*walkPrefixIndexesUpword(e){const t=this.repository;let r=!1;const n=async function*(s,o=new Set){if(!o.has(M(s)))try{const a=(await t.openFileStream(M(s))).getReader(),c=new TextDecoder,f=new Set;o.add(M(s)),o.add(s);for await(const h of D(a,c))f.add(h);for(const h of[...f].reverse())!r&&o.has(j(s,h))&&(r=!0),r&&(yield*n(j(s,h),o))}catch{o.add(s)}if(!o.has(R(s)))try{await t.readFile(R(s)),yield R(s),o.add(R(s)),o.add(s)}catch{o.add(s)}o.has(k(s).base)||(r=!1,yield*n(k(s).base,o))};yield*n(e,new Set)}flatPrefixIndexLine(e){const t=new Set,r=[];for(const n of e)for(const[s,o]of Object.entries(n.ref))t.has(s)||(t.add(s),r.push({v:n.v,vs:n.vs,ref:{[s]:o}}));return r}getPrefixIndexPath(e,t){const r=[...e].slice(0,t).map(n=>n.charCodeAt(0).toString(16).padStart(4,"0"));return j(...r)}async buildRecords(e){const t=e.relations??{},r=new Set([e.name]);for(const a of Object.values(t))this.isThroughRelation(a)&&r.add(a.through),r.add(a.to);const n=await Promise.all(Array.from(r).map(a=>this.sourceLoader.loadBySourceName(a))),s=Array.from(r).reduce((a,c,f)=>(a[c]=n[f],a),{}),o={};for(const[a,c]of Object.entries(t))this.isThroughRelation(c)?o[a]={targetMap:A(s[c.to],c.targetForeignKey),throughMap:A(s[c.through],c.throughForeignKey)}:o[a]={foreignMap:A(s[c.to],c.foreignKey)};return s[e.name].map(a=>{const c={...a};for(const[f,h]of Object.entries(t))this.isThroughRelation(h)?c[f]=V(a,h,s[h.through],s[h.to],o[f].targetMap,o[f].throughMap):c[f]=_(a,h,s[h.to],o[f].foreignMap);return c})}getPrefixIndexPathByResolvedRecords(e,t){const r=Array.from(new Set(Object.keys(t))),n=new Map;for(const s of e){const o=new Map;for(const i of r){const a=F(s,i);for(const c of a){const f=this.getPrefixIndexPath(c,t[i].depth);o.get(i)||o.set(i,new Set),o.get(i)?.add(f)}}n.set(s.slug,o)}return n}createIndexLines(e,t,r,n){if(!r.indexes)return[];const s=Object.keys(r.indexes),o=e.map(c=>this.extractIndexField(c,r)),i=new Map;for(const c of o){i.has(c.slug)||i.set(c.slug,new Map);const f=i.get(c.slug);for(const h of s){f.has(h)||f.set(h,new Map);const g=f.get(h),u=c.values.get(h);if(u)for(const{value:d,refSlug:y}of u){const x=Array.isArray(d)?d:[d];for(const p of x)g.has(p)||g.set(p,new Map),g.get(p).set(y,!0)}}}const a=new Map;for(const[c,f]of i)for(const[h,g]of f)for(const[u,d]of g)for(const[y]of d){const x=r.indexes[h],p=this.getPrefixIndexPath(u,x.depth),w=R(x.dir,p),v=n?this.getStatus(n,r.name,c):"A",m={v:u,vs:y,ref:$(new Map([[c,t.get(c)]]))};a.has(w)||a.set(w,new Map);const S=a.get(w);S.has(v)||S.set(v,[]),S.get(v).push(m)}return a}collectPrefixDirs(e,t,r){const n=new Map;if(!t.indexes)throw new Error("");for(const[o,i]of e.entries()){const a=r?this.getStatus(r,t.name,o):"A";for(const[c,f]of i.entries()){const h=t.indexes[c];for(const g of f){const u=g.split("/");let d=h.dir;for(let y=0;y<u.length;y++){const x=u[y];n.has(a)||n.set(a,new Map);const p=n.get(a);p.has(d)||p.set(d,new Set),p.get(d).add(x),d+=x+"/"}}}}const s=new Map;for(const[o,i]of n.entries()){const a=new Map(Array.from(i).reverse()),c=new Map;for(const[f,h]of a.entries())c.set(M(f),new Set([...h].sort((g,u)=>g.localeCompare(u))));s.set(o,c)}return s}getStatus(e,t,r){const n=e.get(t);if(!n)throw new Error(`[${t}] is not found`);let s=null;for(const[o,i]of n.entries())for(const a of i)a.slug===r&&(s=o);if(!s)throw new Error(`[${t}] is not found`);return s}extractIndexField(e,t){const r=Object.keys(t.indexes??{}),n=new Map;for(const s of r){let o=F(e,s),i=new Array(o.length).fill(e.slug);const a=s.split(".").shift()??"";t.relations?.hasOwnProperty(a)&&(i=F(e,`${a}.slug`));for(let c=0;o.length>c;c++)(o[c]!=null||i[c]!=null)&&(n.has(s)||n.set(s,new Set),n.get(s)?.add({value:o[c],refSlug:i[c]}))}if(t.indexes&&this.customIndexers){for(const[s,o]of Object.entries(t.indexes))if(Object.prototype.hasOwnProperty.call(this.customIndexers,`${t.name}.${s}`))try{const i=this.customIndexers[`${t.name}.${s}`],a=i(e);if(a!=null){n.has(s)||n.set(s,new Set);const c=Array.isArray(a)?a:[a];for(const f of c)n.get(s)?.add({value:f,refSlug:e.slug})}}catch(i){this.logger?.warn?.(`[Indexer] Custom indexer for "${s}" threw error: ${i}`)}}return{slug:e.slug,values:n}}isThroughRelation(e){return typeof e=="object"&&"through"in e&&(e.type==="hasOneThrough"||e.type==="hasManyThrough")}static getIndexDir(e,t){return`${this.indexPrefix}/${e}.${t}/`}getIndexPath(e,t,r){const n=this.resolver.resolveOne(e);if(!n.indexes)return null;const s=n.indexes[t],o=this.getPrefixIndexPath(r,s.depth);return R(s.dir,o)}async findIndexLines(e,t,r,n=(s,o)=>s===o){const s=this.resolver.resolveOne(e);if(!s.indexes)return null;let o=this.getIndexPath(e,t,r);if(o&&s.indexes[t].depth>r.length&&(o=await this.findFirstIndexPath(k(o).base)),!o||!await this.repository.exists(o))return null;const i=this.repository,a=this.walkPrefixIndexesDownword,c=C(g=>a.bind(this)(g),g=>g,this.cache),f=new Set;let h=null;e:for await(const g of c(k(o).base))try{const d=(await i.openFileStream(g)).getReader(),y=new TextDecoder;for await(const x of B(d,y))if(n(x.v,r)?(f.add(x),h=!0):h===!0&&(h=!1),h===!1){await d.cancel();break e}if(!f.size)break}catch{break e}return this.flatPrefixIndexLine([...f])}indexSort(e=["v","vs"]){return(t,r)=>{for(const n of e){const s=t[n],o=r[n];if(typeof s=="string"&&typeof o=="string"){const i=s.localeCompare(o);if(i!==0)return i}else if(s!==o)return s<o?-1:1}return 0}}}O.indexPrefix="index";O.indexDepth=1;class L{constructor(e){this.sources=e,this.cache={}}resolveAll(){if(Object.values(this.cache).length!==0)return Object.values(this.cache);for(const[e]of Object.entries(this.sources))this.cache[e]=this.resolveOne(e);return Object.values(this.cache)}resolveOne(e){if(this.cache[e])return this.cache[e];const t=this.sources[e];if(!t)throw new Error(`Source not found: ${e}`);const r={slug:{dir:O.getIndexDir(e,"slug"),depth:O.indexDepth}};if(t.index)for(const[o,i]of Object.entries(t.index)){const a=i.indexDepth??O.indexDepth;if(!this.isDepthInRange(a))throw new Error("");r[o]={dir:O.getIndexDir(e,o),depth:a}}const n=[...Object.entries(this.sources).filter(([o])=>o!==e).map(([o,i])=>Object.entries(i.relations??{}).find(([a,c])=>this.isThroughRelation(c)?c.to===e||c.through===e:c.to===e)).filter(Boolean).filter(o=>!!o),...Object.entries(t.relations??{})];if(n)for(const[o,i]of n){const a=[];if(i.type==="belongsTo"||i.type==="belongsToMany"||i.type==="hasOne"||i.type==="hasMany"?i.to===e?a.push(i.foreignKey==="slug"?null:i.foreignKey):a.push(i.localKey==="slug"?null:i.localKey):(i.type==="hasOneThrough"||i.type==="hasManyThrough")&&(i.to===e?a.push(i.throughForeignKey==="slug"?null:i.throughForeignKey):a.push(i.targetForeignKey==="slug"?null:i.targetForeignKey)),!!a.length)for(const c of a)c&&(r[c]={dir:O.getIndexDir(e,c),depth:O.indexDepth})}if(t.customIndex)for(const[o,i]of Object.entries(t.customIndex)){const a=i.indexDepth??O.indexDepth;if(!this.isDepthInRange(a))throw new Error("");r[o]={dir:O.getIndexDir(e,o),depth:a}}const s={name:e,pattern:t.pattern,type:t.type,schema:t.schema,relations:t.relations,indexes:r};return this.cache[e]=s,s}isThroughRelation(e){return typeof e=="object"&&"through"in e&&(e.type==="hasOneThrough"||e.type==="hasManyThrough")}isDepthInRange(e){return e>=1&&e<=10}static getSourcePathsBySlugs(e,t){const r=e.match(/\.(\w+)$/),n=r?"."+r[1]:"";let s=t;if(e.includes("*")){const o=e.indexOf("*");let i=e.slice(o);i=this.pathToSlug(i).replace(/\.[^\.]+$/,""),i=i.replace(/\*\*/g,"([\\w-]+(--)?)*").replace(/\*/g,"[\\w-]+");const a=new RegExp("^"+i+"$");s=t.filter(c=>a.test(c))}return s.map(o=>this.resolveFilePath(e,this.slugToPath(o)+n))}static slugToPath(e){return e.replace(/--/g,"/")}static pathToSlug(e){return e.replace(/\//g,"--")}static extractBaseDir(e){const t=e.split("/"),r=t.findIndex(n=>n.includes("*"));return r===-1?e:j(...t.slice(0,r))+"/"}static resolveFilePath(e,t){return this.extractBaseDir(e)+t}static getSlugFromPath(e,t){const r=t.slice(t.lastIndexOf("."))||"",n=this.extractBaseDir(e);let s=t.startsWith(n)?t.slice(n.length):t;return s.startsWith("/")&&(s=s.slice(1)),this.pathToSlug(s.replace(r,""))}static patternTest(e,t){return this.globToRegExp(e).test(t)}static globToRegExp(e){const t=e.replace(/\\/g,"/");let r="^",n=0;for(;n<t.length;){const s=t[n];if(s==="*")if(t[n+1]==="*"){n++;const o=t[n+1]==="/";o&&n++,r+=o?"(?:[^/]+/)*":"(?:[^/]+/)*[^/]*"}else r+="[^/]*";else r+=s.replace(/[$^+.()|{}]/g,"\\$&");n++}return r+="$",new RegExp(r)}}function Q({rawContent:l}){const e=l.replace(/\r\n/g,`
`).split(`
`);let t=0;for(;t<e.length&&(!e[t].trim()||e[t].trim().startsWith("#"));)t++;if(e[t]&&e[t].trim().startsWith("- "))return n(0);function r(i=0){const a={};let c=null;for(;t<e.length;){let f=e[t];if(!f.trim()||f.trim().startsWith("#")){t++;continue}const h=f.match(/^(\s*)/)[1].length;if(h<i)break;if(f.includes(":")){const[g,...u]=f.split(":");let d=u.join(":").trim();if(t++,d.startsWith("[")&&!d.endsWith("]")){let p=[d];for(;t<e.length;){const w=e[t].trim();if(p.push(w),t++,w.endsWith("]"))break}d=p.join(" ").replace(/\s+/g," ")}const y=e[t],x=y?.match(/^(\s*)/);if(d===""&&x&&x[1].length>h&&y.trim().startsWith("- "))a[g.trim()]=n(h+2);else if(d===""&&x&&x[1].length>h&&y.trim().startsWith("[")){let p=[];for(;t<e.length;){const v=e[t].trim();if(p.push(v),t++,v.endsWith("]"))break}const w=p.join(" ").replace(/\s+/g," ");a[g.trim()]=s(w)}else if(x&&x[1].length>h){const p=r(h+2);a[g.trim()]=Object.keys(p).length?p:s(d)}else a[g.trim()]=s(d)}else if(f.trim().startsWith("- ")){c||(c=[]);let g=f.slice(f.indexOf("- ")+2);if(g.includes(":")){const[u,...d]=g.split(":"),y=d.join(":").trim(),x={};x[u.trim()]=s(y),t++;const p=r(h+2);Object.assign(x,p),c.push(x)}else c.push(s(g.trim())),t++}else t++}return c&&c.length>0?c:c&&c.length===0&&i===0?[]:a}function n(i=0){const a=[];for(;t<e.length;){let c=e[t];if(!c.trim()||c.trim().startsWith("#")){t++;continue}const f=c.match(/^(\s*)/)[1].length;if(f<i)break;if(c.trim().startsWith("- ")){let h=c.slice(c.indexOf("- ")+2);if(h.includes(":")){const[g,...u]=h.split(":"),d=u.join(":").trim(),y={};y[g.trim()]=s(d),t++;const x=r(f+2);Object.assign(y,x),a.push(y)}else a.push(s(h.trim())),t++}else break}return a}function s(i){if(i==="true")return!0;if(i==="false")return!1;if(/^-?\d+(\.\d+)?$/.test(i))return Number(i);if(i.startsWith("[")&&i.endsWith("]"))return i.slice(1,-1).split(",").map(a=>a.replace(/^[\s'"]+|[\s'",]+$/g,"")).filter(a=>a.length>0);if(i==="null")return null;if(i!=="")return i}return r(0)}function ne({rawContent:l}){const e=l.match(/^---\s*\n([\s\S]*?)\n---\s*\n?/);let t={};if(e){const r=Q({rawContent:e[1]});t=Array.isArray(r)?r[0]:r}return t}function oe({rawContent:l}){return JSON.parse(typeof l=="string"?l:new TextDecoder().decode(l))}const G={markdown:({rawContent:l})=>{const e=l instanceof Uint8Array?new TextDecoder().decode(l):l;return ne({rawContent:e})},yaml:({rawContent:l})=>{const e=l instanceof Uint8Array?new TextDecoder().decode(l):l;return Q({rawContent:e})},json:({rawContent:l})=>{const e=l instanceof Uint8Array?new TextDecoder().decode(l):l;return oe({rawContent:e})}};function ie(l,e){G[l]=e}async function z(l,e){let t;e.rawContent instanceof Uint8Array?t=new TextDecoder().decode(e.rawContent):t=e.rawContent;const r=G[l];if(!r)throw new Error(`No parser registered for type: ${l}`);return r({rawContent:t})}class H{constructor(e,t,r){this.repository=e,this.resolver=t,this.validator=r,this.cache=new Y}async loadBySourceName(e){const t=this.resolver.resolveOne(e),r=await this.repository.listFiles(t.pattern),n=[];for(const o of r)n.push(await this.load(o,t));return Array.isArray(n)&&Array.isArray(n[0])?n.flat():n}async load(e,t){let r;try{r=await this.repository.readFile(e)}catch{throw new Error(`Target Source [${e}] is not found.`)}const n=await z(t.type,{rawContent:r});let s=[];return Array.isArray(n)?(n.map(o=>this.validator.validate(o,t.schema,t.name)),s=n.flat()):(n.slug=L.getSlugFromPath(t.pattern,e),this.validator.validate(n,t.schema,t.name),s=n),s}async loadBySlug(e,t){const r=this.resolver.resolveOne(e);if(!r)throw new Error(`Unknown source: ${e}`);let n;r.pattern.includes("*")?n=L.getSourcePathsBySlugs(r.pattern,[t])[0]:n=r.pattern;try{const{parsed:s,raw:o}=await this.parseFile(n,r);if(Array.isArray(s)){const i=s.find(a=>a&&a.slug===t);if(!i)throw new Error(`Slug '${t}' not found in file: ${n}`);return this.validator.validate(i,r.schema,r.name),i.raw=o,i}else return this.validator.validate(s,r.schema,r.name),s.raw=o,s}catch(s){throw new Error(`Failed to loadBySlug: ${n} — ${s}`)}}async loadBySlugs(e,t){const r=[...new Set(t)];return Promise.all(r.map(n=>this.loadBySlug(e,n)))}async parseFile(e,t){if(await this.cache.has(e)){const s=await this.cache.get(e);if(s)return s}let r=await this.repository.readFile(e),n=await z(t.type,{rawContent:r});if(t.pattern.includes("*")&&!Array.isArray(n)&&typeof n=="object"&&n!==null){const s=L.getSlugFromPath(t.pattern,e),o=n;if(!o.slug)o.slug=s;else if(!s.includes(String(o.slug)))throw new Error(`Slug mismatch: expected "${s}", got "${o.slug}" in ${e}`);n=o}return await this.cache.set(e,{parsed:n,raw:r}),{parsed:n,raw:r}}}class ae{constructor(e,t,r,n,s){this.sourceName=e,this.loader=t,this.indexer=r,this.resolver=n,this.logger=s,this.joins=[],this.filters=[],this._orderByKey="slug",this._orderByDirection="asc",this._cursorDirection="after",this._pageSize=20}join(e){return this.joins=[...this.joins,e],this}where(e,t,r){return this.filters.push({field:e,op:t,value:r}),this}async find(e){const t=this.resolver.resolveOne(this.sourceName),r=this.joins.length>0;let n=await this.loader.loadBySlug(this.sourceName,e);return r&&(n=(await this.applyJoins([n],t))[0]),n}orderBy(e,t="asc"){return this._orderByKey=e,this._orderByDirection=t,this}cursor(e,t="after"){return this._cursorValue=e,this._cursorDirection=t,this}pageSize(e){return this._pageSize=e,this}async exec(){const e=this.resolver.resolveOne(this.sourceName),t=this.joins.length>0,{page:r,pageInfo:n}=await this.compose(),s=r.flatMap(i=>Object.keys(i.ref));let o=await this.loader.loadBySlugs(this.sourceName,s);return t&&(o=await this.applyJoins(o,e)),{data:o,pageInfo:n}}async peek(){return await this.compose()}async compose(){const e=this.resolver.resolveOne(this.sourceName),t=this.extractIndexFilters(e),r=String(this._orderByKey),n={page:[],pageInfo:{hasNextPage:!1,hasPreviousPage:!1,startCursor:void 0,endCursor:void 0}};let s=await this.getMatchedIndexes(this.sourceName,t,e),o,i;const a=c=>{const f=Object.keys(c.ref).length,h=Object.keys(c.ref)[f-1],g=Object.values(c.ref)[f-1][r];return re({order:{[r]:g[0]},slug:h})};if(s.length){const c=this._cursorValue?W(this._cursorValue):void 0,f=this.getStartIdx(s,c);o=se(s,f,this._pageSize,this._cursorDirection),i=te(o,this._pageSize,f,s.length,this._cursorDirection,a)}else if(!s.length&&!t.length){if(!e.indexes[r])throw new Error(`[${this.sourceName}] needs index: ${r}`);const c=e.indexes[r].dir,f=this._orderByDirection==="desc",h=this._cursorDirection==="after";let g,u;if(h?o=await Array.fromAsync(this.indexer.readForwardPrefixIndexLines(c,this._pageSize+1,this._cursorValue,r,f)):o=(await Array.fromAsync(this.indexer.readBackwardPrefixIndexLines(c,this._pageSize+1,this._cursorValue,r,f))).reverse(),!o.length)return n;g=h?!!this._cursorValue:o.length>this._pageSize,u=h?o.length>this._pageSize:!!this._cursorValue,o=o.slice(0,this._pageSize),i={hasPreviousPage:g,hasNextPage:u,startCursor:a(o[0]),endCursor:a(o[o.length-1])}}else return n;return{page:o,pageInfo:i}}getStartIdx(e,t){if(!t)return 0;const r=String(this._orderByKey);return e.findIndex(n=>{for(const[s,o]of Object.entries(n.ref)){let i=s===t.slug;if(r&&t.order[r]){const a=o[r]?.[0];i=i&&a===t.order[r]}return i}return!1})}extractIndexFilters(e){const t=new Set(["slug",...Object.keys(e.indexes??{})]),r=this.filters.filter(s=>t.has(s.field)),n=this.filters.filter(s=>!t.has(s.field));if(n.length>0)throw new Error(`[${this.sourceName}] needs index: ${JSON.stringify(n)}`);return r}async applyJoins(e,t){for(const r of this.joins){const n=t.relations?.[r];if(!n)throw new Error(`Unknown relation: ${r}`);n.type==="hasOneThrough"||n.type==="hasManyThrough"?e=await this.applyThroughRelation(e,r,n):(n.type==="hasOne"||n.type==="hasMany"||n.type==="belongsTo"||n.type==="belongsToMany")&&(e=await this.applyDirectRelation(e,r,n))}return e}async applyDirectRelation(e,t,r){const n=r;let s=[];if(n.type==="belongsTo"||n.type==="belongsToMany"){const o=e.flatMap(a=>F(a,n.localKey)),i=await this.getMatchedIndexes(n.to,[{field:n.foreignKey,op:"in",value:o}],this.resolver.resolveOne(n.to))??[];s=await this.loader.loadBySlugs(n.to,i.map(a=>Object.keys(a.ref)).flat())}else{const o=e.flatMap(a=>F(a,n.localKey)),i=Array.from(new Set(o));s=await this.loader.loadBySlugs(n.to,i)}return e.map(o=>{if(n.type==="belongsTo"||n.type==="belongsToMany"){const i=F(o,n.localKey),a=s.filter(c=>{const f=F(c,n.foreignKey);return i.some(h=>f.includes(h))});return{...o,[t]:a}}else{const i=_(o,n,s);return{...o,[t]:n.type==="hasOne"?i??null:i??[]}}})}async applyThroughRelation(e,t,r){const n=e.flatMap(f=>F(f,r.sourceLocalKey)),s=await this.getMatchedIndexes(r.through,[{field:r.throughForeignKey,op:"in",value:n}],this.resolver.resolveOne(r.through))??[],o=await this.loader.loadBySlugs(r.through,s.map(f=>Object.keys(f.ref)).flat()),i=o.flatMap(f=>F(f,r.throughLocalKey)),a=await this.getMatchedIndexes(r.to,[{field:r.targetForeignKey,op:"in",value:i}],this.resolver.resolveOne(r.through))??[],c=await this.loader.loadBySlugs(r.to,a.map(f=>Object.keys(f.ref)).flat());return e.map(f=>{const h=V(f,r,o,c);return{...f,[t]:r.type==="hasOneThrough"?h??null:h??[]}})}async getMatchedIndexes(e,t,r,n=!0){let s=null;for(let i=0;i<t.length;i++){const a=t[i],{field:c,op:f,value:h}=a;let g=[];if(c==="slug"&&(f==="eq"||f==="in"&&Array.isArray(h)))g=q(h).map(d=>String(d)).map(d=>({v:d,vs:d,ref:{[d]:{slug:[d]}}}));else if(n&&s&&i>0){const d=r.indexes?.[c]?.depth??O.indexDepth;let y=[];for(const x of q(h)){const p=String(x),w=this.indexer.getPrefixIndexPath(p,d),v=s.filter(m=>{const S=Object.keys(m.ref)[0],b=m.ref[S]?.[c];return b?b.some(P=>f==="startsWith"?P.startsWith(w):P===w):!1});if(v.length)if(p.length<=d)y.push(...v);else{const m=await this.indexer.findIndexLines(e,c,p);if(!m)continue;y.push(...s.filter(S=>{const b=Object.keys(S.ref)[0];return m.some(P=>!!P.ref[b])}))}}if(g.push(...y),!g.length)return[]}else if(Object.keys(r.indexes??{}).length){if(f==="eq")g=await this.indexer.findIndexLines(e,c,String(h))??[];else if(f==="startsWith")g=await this.indexer.findIndexLines(e,c,String(h),(u,d)=>u.startsWith(d))??[];else if(f==="in"&&Array.isArray(h)){const u=new Set;for(const y of h)u.add(this.indexer.findIndexLines(e,c,String(y)));const d=(await Promise.all([...u])).flat();g.push(...d.filter(y=>!!y))}}n?s=g:s=[...s??[],...g]}const o=s??[];return o.sort((i,a)=>{const[,c]=Object.entries(i.ref)[0],[,f]=Object.entries(a.ref)[0],h=String(c[String(this._orderByKey)]),g=String(f[String(this._orderByKey)]),u=h==null||h==="",d=g==null||g==="";if(u||d)throw new Error("orderby need index");return this._orderByDirection==="desc"?g.localeCompare(h):h.localeCompare(g)}),o.length?o:[]}}function N(l,e,t="",r=null){r||(r=JSON.stringify(l));const n=e.type;if(!n)return;const s=Array.isArray(n)?n:[n],o=t||"value";if(l===null){if(!s.includes("null"))throw new Error(`Expected ${s.join(" or ")} at '${o}', got null, at: ${r}`);return}if(s.includes("array")){if(!Array.isArray(l))throw new Error(`Expected array at '${o}', got ${typeof l}, at: ${r}`);if(e.items)for(let c=0;c<l.length;c++)N(l[c],e.items,`${o}[${c}]`);return}if(s.includes("object")){if(typeof l!="object"||Array.isArray(l))throw new Error(`Expected object at '${o}', got ${typeof l}`);for(const c of e.required??[])if(!(c in l))throw new Error(`Missing required field: '${o}.${c}', at: ${r}`);for(const[c,f]of Object.entries(e.properties??{})){const h=l[c];h!==void 0&&N(h,f,`${o}.${c}`,r)}return}const i=typeof l;let a=!1;for(const c of s){switch(c){case"string":i==="string"&&(a=!0);break;case"number":i==="number"&&(a=!0);break;case"integer":i==="number"&&Number.isInteger(l)&&(a=!0);break;case"boolean":i==="boolean"&&(a=!0);break;case"date":(typeof l=="string"||typeof l=="object")&&!isNaN(Date.parse(l))&&(a=!0);break}if(a)break}if(!a)throw new Error(`Expected ${s.join(" or ")} at '${o}', got ${i}, at: ${r}`)}const ce={validate(l,e,t){N(l,e,t)}};class le{constructor(e="info"){this.currentLevel=e,this.levelOrder={debug:1,info:2,warn:3,error:4,silent:5}}setLevel(e){this.currentLevel=e}shouldLog(e){return this.levelOrder[e]>=this.levelOrder[this.currentLevel]}debug(...e){this.shouldLog("debug")&&console.debug("[staticql][debug]",...e)}info(...e){this.shouldLog("info")&&console.info("[staticql]",...e)}warn(...e){this.shouldLog("warn")&&console.warn("[staticql][warn]",...e)}error(...e){this.shouldLog("error")&&console.error("[staticql][error]",...e)}}class fe{constructor(e,t,r,n={}){this.config=e,this.repository=t,this.sourceConfigResolver=r,this.options=n,this.validator=this.options.validator??ce,this.logger=this.options.logger??new le("info")}from(e){const t=new H(this.repository,this.sourceConfigResolver,this.validator),r=new O(t,this.repository,this.sourceConfigResolver,this.logger);return new ae(e,t,r,this.sourceConfigResolver,this.logger)}async saveIndexes(e){await this.getIndexer(e).save()}getConfig(){return this.config}getIndexer(e){const t=new H(this.repository,this.sourceConfigResolver,this.validator);return new O(t,this.repository,this.sourceConfigResolver,this.logger,e)}}class he{constructor(e,t,r){this.defaultRepository=e,this.sourceRepositories=t,this.writeRepository=r??e}setResolver(e){if(this.resolver=e,this.defaultRepository&&typeof this.defaultRepository.setResolver=="function"&&this.defaultRepository.setResolver(e),this.sourceRepositories)for(const t of Object.values(this.sourceRepositories))t&&typeof t.setResolver=="function"&&t.setResolver(e);this.writeRepository&&typeof this.writeRepository.setResolver=="function"&&this.writeRepository.setResolver(e)}getReadRepositoryForPattern(e){if(this.resolver&&this.sourceRepositories){for(const[t,r]of Object.entries(this.resolver.resolveAll()))if(r.pattern===e){const n=this.sourceRepositories[t];if(n)return n}}if(this.defaultRepository)return this.defaultRepository;throw new Error(`MultiRepository: no repository found for pattern: ${e}`)}getReadRepositoryForPath(e){if(this.resolver&&this.sourceRepositories){for(const{name:t,pattern:r}of this.resolver.resolveAll())if(L.patternTest(r,e)){const n=this.sourceRepositories[t];if(n)return n;break}}if(this.defaultRepository)return this.defaultRepository;throw new Error(`MultiRepository: no repository found for path: ${e}`)}async listFiles(e){return this.getReadRepositoryForPattern(e).listFiles(e)}async readFile(e){return this.getReadRepositoryForPath(e).readFile(e)}async openFileStream(e){return this.getReadRepositoryForPath(e).openFileStream(e)}async exists(e){return this.getReadRepositoryForPath(e).exists(e)}async writeFile(e,t){return this.writeRepository.writeFile(e,t)}async removeFile(e){return this.writeRepository.removeFile(e)}async removeDir(e){return this.writeRepository.removeDir(e)}}function we(l){return({repository:e,defaultRepository:t,sourceRepositories:r,writeRepository:n,options:s={}})=>{if(s.parsers)for(const[a,c]of Object.entries(s.parsers))ie(a,c);const o=new L(l.sources);let i;if(t||r||n)i=new he(t??e,r,n??t??e);else{if(!e)throw new Error("StaticQL requires a repository instance");i=e}return"setResolver"in i&&typeof i.setResolver=="function"&&i.setResolver(o),new fe(l,i,o,s)}}class me{constructor(e="/"){this.baseUrl=e.replace(/\/+$/,"")+"/"}setResolver(e){this.resolver=e}async readFile(e){const t=this.baseUrl+e.replace(/^\/+/,""),r=await fetch(t);if(!r.ok)throw new Error(`Failed to fetch: ${t}`);return await r.text()}async exists(e){const t=this.baseUrl+e.replace(/^\/+/,"");return(await fetch(t,{method:"HEAD"})).ok}async listFiles(e){const r=(this.resolver?.resolveAll()??[]).find(a=>e.startsWith(a.pattern));if(!r)return[];const n=`index/${r.name}.slug`,o=(await this.readAllIndexesRemote(n)).map(a=>a.v).filter(Boolean);let i;return e.includes("*")?i=L.getSourcePathsBySlugs(e,o):i=o.map(a=>r.pattern.replace("*",a)),i}async writeFile(e,t){throw new Error("writeFile is not supported in browser environment")}async removeFile(e){throw new Error("removeFile is not supported in browser environment")}async removeDir(e){throw new Error("removeFile is not supported in browser environment")}async fetchIndexFile(e){const t=e.startsWith("/")?this.baseUrl+e.replace(/^\/+/,""):this.baseUrl+e,r=await fetch(t);return r.ok?await r.json():[]}async openFileStream(e){const t=await fetch(`${this.baseUrl}${e}`);if(!t.ok)throw new Error(`Failed to fetch ${e}`);return t.body}async readAllIndexesRemote(e){const t=[];try{const r=R(this.baseUrl,e),n=await fetch(r);if(n.ok){const s=await n.text(),o=this.flatPrefixIndexLine(s.split(`
`).map(i=>i.trim()).filter(Boolean).map(i=>JSON.parse(i)));t.push(...o)}}catch{}try{const r=M(this.baseUrl,e),n=await fetch(r);if(n.ok){const s=await n.text(),o=ee(s);for(const i of o){const a=j(e,i),c=await this.readAllIndexesRemote(a);t.push(...c)}}}catch{}return t}flatPrefixIndexLine(e){const t=new Set,r=[];for(const n of e)for(const[s,o]of Object.entries(n.ref))t.has(s)||(t.add(s),r.push({v:n.v,vs:n.vs,ref:{[s]:o}}));return r}}export{me as F,ye as I,ge as L,xe as a,we as d};
